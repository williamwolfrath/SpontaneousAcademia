<?php


function ihsgeneral_menu() {
    
    $items['testpage'] = array(
	'title' => 'Test Page',
	'description' => 'For testing',
	'page callback' => 'ihsgeneral_main',
	'access callback' => true,
	'type' => MENU_CALLBACK,
    );
    $items['kosmos-search'] = array(
	'title' => 'Kosmos Search',
	'description' => 'Kosmos Search',
	'page callback' => 'ihsgeneral_kosmos_search',
	'access callback' => true,
	'type' => MENU_CALLBACK,
    );
    
    $items['kosmos-people-search'] = array(
	'title' => 'Profile Search',
	'description' => 'Profile Search',
	'page callback' => 'ihsgeneral_kosmos_people_search',
	'access callback' => true,
	'type' => MENU_CALLBACK,
    );
    
    return $items;
}



function ihsgeneral_kosmos_search($type = 'apachesolr_search') {
   //dd('kosmos search function');
    $results = '';
   //dd($_POST);
    if (!isset($_POST['form_id'])) {
	dd('here?');
	if (empty($type)) {
	    drupal_goto('search/apachesolr_search');
	}
	// START MODIFICATION
	$keys = trim(kosmos_get_keys());
	dd($keys);
	// END
	$filters = '';
	dd('type is ' . $type);
	dd('GET is ' );
	dd($_GET);
	if ($type == 'apachesolr_search' && isset($_GET['filters'])) {
	    $filters = trim($_GET['filters']);
	   //dd('the filters are ' . $filters);
	}
	if ($keys || $filters) {
	    // Log the search keys:
	    $log = $keys;
	    if ($filters) {
		$log .= 'filters='. $filters;
	    }
	    watchdog('search','%keys (@type).', array('%keys' => $log,'@type' => t('Search')), WATCHDOG_NOTICE, l(t('results'), 'search/'. $type .'/'. $keys));
 
	    // START MODIFICATION
	    $results = search_data($keys, 'kosmos');
	    // END
 
	    if ($results) {
		$results = theme('box', t('Search results'), $results);
	    }
	    else {
		$results = theme('box', t('Your search yielded no results'),
		variable_get('apachesolr_search_noresults', apachesolr_search_noresults()));
	    }
	}
    }
   //dd('down here');
    return drupal_get_form('kosmos_search_form', NULL, $keys, $type) . $results;
}


function ihsgeneral_kosmos_people_search($type = 'apachesolr_search') {
   //dd('kosmos search function');
    $results = '';
   //dd($_POST);
    if (!isset($_POST['form_id'])) {
	dd('here?');
	if (empty($type)) {
	    drupal_goto('search/apachesolr_search');
	}
	// START MODIFICATION
	$keys = trim(kosmos_get_keys());
	dd($keys);
	// END
	$filters = '';
	dd('type is ' . $type);
	dd('GET is ' );
	dd($_GET);
	if ($type == 'apachesolr_search' && isset($_GET['filters'])) {
	    $filters = trim($_GET['filters']);
	   //dd('the filters are ' . $filters);
	}
	if ($keys || $filters) {
	    // Log the search keys:
	    $log = $keys;
	    if ($filters) {
		$log .= 'filters='. $filters;
	    }
	    watchdog('search','%keys (@type).', array('%keys' => $log,'@type' => t('Search')), WATCHDOG_NOTICE, l(t('results'), 'search/'. $type .'/'. $keys));
 
	    // START MODIFICATION
	    $results = search_data($keys, 'kosmos');
	    // END
 
	    if ($results) {
		$results = theme('box', t('Search results'), $results);
	    }
	    else {
		$results = theme('box', t('Your search yielded no results'),
		variable_get('apachesolr_search_noresults', apachesolr_search_noresults()));
	    }
	}
    }
   //dd('down here');
    return drupal_get_form('kosmos_people_search_form', NULL, $keys, $type) . $results;
}


function kosmos_get_keys() {
  static $return;
  if (!isset($return)) {
    $parts = explode('/', $_GET['q']);
    if (count($parts) == 2) {
      $return = array_pop($parts);
    }
    else {
      $return = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    }
  }
  return $return;
}


function kosmos_search($op = 'search', $keys = NULL) {
   //dd('kosmos REG search');
  switch ($op) {
    case 'name':
      return t('Profile Search');
 
    case 'reset':
      apachesolr_clear_last_index('apachesolr_search');
      return;
 
    case 'status':
      return apachesolr_index_status('apachesolr_search');
 
    case 'search':
      $filters = isset($_GET['filters']) ? $_GET['filters'] : '';
      //$filters = 'type:profile';
      $solrsort = isset($_GET['solrsort']) ? $_GET['solrsort'] : '';
      $page = isset($_GET['page']) ? $_GET['page'] : 0;
      try {
        $results = apachesolr_search_execute(
          $keys,
          $filters,
          $solrsort,
          // START MODIFICATION
          'kosmos-search', $page);
          // END
        return $results;
      }
      catch (Exception $e) {
        watchdog(
          'Apache Solr',
          nl2br(check_plain($e->getMessage())),
          NULL, WATCHDOG_ERROR);
        apachesolr_failure(t('Solr search'), $keys);
      }
      break;
  } // switch
}


function kosmos_people_search($op = 'search', $keys = NULL) {
   //dd('kosmos PEOPLE search');
  switch ($op) {
    case 'name':
      return t('Profile Search');
 
    case 'reset':
      apachesolr_clear_last_index('apachesolr_search');
      return;
 
    case 'status':
      return apachesolr_index_status('apachesolr_search');
 
    case 'search':
      //$filters = isset($_GET['filters']) ? $_GET['filters'] : '';
      $filters = 'type:profile';
      $solrsort = isset($_GET['solrsort']) ? $_GET['solrsort'] : '';
      $page = isset($_GET['page']) ? $_GET['page'] : 0;
      try {
        $results = apachesolr_search_execute(
          $keys,
          $filters,
          $solrsort,
          // START MODIFICATION
          'kosmos-people-search', $page);
          // END
        return $results;
      }
      catch (Exception $e) {
        watchdog(
          'Apache Solr',
          nl2br(check_plain($e->getMessage())),
          NULL, WATCHDOG_ERROR);
        apachesolr_failure(t('Solr search'), $keys);
      }
      break;
  } // switch
}



function ihsgeneral_form_search_block_form_alter(&$form, $form_state) {
   //dd('search block form alter!!!');
    $form['#action'] = "/kosmos-search";
}



function ihsgeneral_main() {
    return "Great success!";
}



function ihsgeneral_form_job_posting_node_form_alter(&$form, &$form_state) {
    //log_debug('ihsgeneral form alter. ');
    //log_debug('form: ', $form);
    $form['required']['job_posting_email']['#type'] = 'hidden';
    $form['required']['job_posting_email']['#required'] = FALSE;
    $form['required']['job_posting_applink']['#type'] = 'hidden';
}



function ihsgeneral_form_og_confirm_subscribe_alter(&$form, &$form_state) {
    //log_debug('altering og confirm subscribe form.');
    //log_debug('form is ', $form);
    //log_debug('form state is ', $form_state);
    $form['#submit'] = array('_ihs_og_subscribe_form_submit');
    dpm($form);
    dpm($form_state);
    //log_debug('form is NOW ', $form);
}


function _ihs_og_subscribe_form_submit($form, &$form_state) {
    dpm('my submit');
    $return = og_subscribe_user($form_state['values']['gid'], $form_state['values']['account'], $form_state['values']['request']);
    dpm($return);
    if (!empty($return['message'])) {
	drupal_set_message($return['message']);
    }
    $dest = 'node/'. $form_state['values']['gid'];
    if ($return['type'] == 'subscribed') {  // success according to og.module
	$form_state['redirect'] = array($dest, 'gl=newgroup');
    }
    else {
	$form_state['redirect'] = $dest;
    }
} 


//function ihsgeneral_form_alter(&$form, &$form_state, $form_id) {
//    log_debug()
//}





function ihsgeneral_menu_alter(&$items) {
    $items['search/user/%menu_tail']['type'] = MENU_CALLBACK;
    $items['search/user/%menu_tail']['access callback'] = 0;
    // solr
    
}


function kosmos_search_form($form_state) {
     $form['terms'] = array(
	'#type' => 'textfield',
	'#title' => t('Enter your keywords'),
	'#size' => 15,
	'#maxlength' => 64,
	'#description' => t(''),
    );
     $form['submit'] = array('#type' => 'submit', '#value' => t(''));
     //dd($form);
     //dd('adsfasdfa');
     return $form;
}


function kosmos_people_search_form($form_state) {
     $form['terms'] = array(
	'#type' => 'textfield',
	'#title' => t('Enter your keywords'),
	'#size' => 15,
	'#maxlength' => 64,
	'#description' => t(''),
    );
     $form['submit'] = array('#type' => 'submit', '#value' => t(''));
     //dd($form);
     //dd('adsfasdfa');
     return $form;
}


function kosmos_search_form_submit($form, $form_state) {
   //dd('submit function');
    //dd($form['#post']['terms']);
    drupal_goto('kosmos-search/' . $form['#post']['terms']);
}


function kosmos_people_search_form_submit($form, $form_state) {
   //dd('submit function');
    //dd($form['#post']['terms']);
    drupal_goto('kosmos-people-search/' . $form['#post']['terms']);
}


function ihsgeneral_block($op='list', $delta=0) {
    $block = array();
    switch ($op) {
    case 'list':
      $block[0]['info'] = t('Kosmos Search Block');
      return $block;
    case 'view':
      switch ($delta) {
        case 0: 
          $block['subject'] = t('Kosmos Search');
          $block['content'] = drupal_get_form('kosmos_search_form');
          break;
      }
      return $block;
  }
}



//function ihsgeneral_menu_alter(&$items) {
//    log_debug('zxcvzxcvzxcvz');
//    log_debug('items is ', $items);
//  // Removing certain local navigation tabs that are either undesired or need to be custom relocated.
//
//  // Set these tabs to MENU_CALLBACK, so they still register the path, but just don't show the tab:
//  //$items['node/%node/track']['type'] = MENU_CALLBACK;
//  //$items['user/%user/track']['type'] = MENU_CALLBACK;
//  $items['search/user']['type'] = MENU_CALLBACK;
//  $items['search/user']['access callback'] = FALSE;
//  //log_debug('search user: ', $items['search/user']);
//  
//  // Fully unset these tabs and their paths, don't want them at all. This breaks the path as well:
//  //unset($items['user/%user/example']);
//  unset($items['search/user']);
//}