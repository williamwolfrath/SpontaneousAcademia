<?php


include(drupal_get_path('module', 'safacebook') . '/facebook-platform/php/facebook.php');


function safacebook_menu() {
    $items = array();
    
    $items['admin/settings/safacebook'] = array(
	'title' => 'Facebook Settings',
	'description' => 'Facebook Key Settings',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('safacebook_admin_settings'),
	'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
	'file' => 'safacebook.admin.inc',
    );
    
    $items['testpage'] = array(
	'title' => 'Test Page',
	'description' => 'For testing',
	'page callback' => 'safacebook_test',
	'access callback' => true,
	'type' => MENU_CALLBACK,
    );
    
    $items['facebook-api-test/%'] = array(
	'title' => 'Facebok API Test Page',
	'description' => 'For testing',
	'page callback' => 'safacebook_api',
	'page arguments' => array(1),
	'access callback' => true,
	'type' => MENU_CALLBACK,
    );
 
    return $items;
}




function _stats_test() {
    global $user;
    $uid = $user->uid;
    //log_debug("user id: ", $uid);
    $post_count = user_stats_get_stats('post_count', $uid);
    //log_debug("post count: ", $post_count);
}





function safacebook_init() {
    //_stats_test();
    //log_debug("hello YOO HOO");
    global $user;
    //log_debug("current user obj: ", $user);
    $curr_uri = check_plain(request_uri());
    dd('current uri:');
    dd($curr_uri);
    //log_debug('curr uri: ', $curr_uri);
    //log_debug('curr uri starts with ', substr($curr_uri,0,14));
    
    // if the user is logged into facebook, log them into the site if they aren't already.
    // don't log the user in if it's the logout link...
    // if the user is NOT logged into facebook but is still logged in, log them out
    // don't worry about the admin user
    
    //log_debug('the http referrer is ', $_SERVER["HTTP_REFERER"]);
    
    
    // ALSO check the user role. if IHS staff, ignore. can maybe store the role
    // in the session upon user load
    if ( substr($curr_uri, 0, 6) == "/sites" ) {
	//log_debug("sites directory - SKIP");
    }
    else {
    
	$login_type = $_GET['login'];
	if ($login_type) {
	    $_SESSION['login_type'] = $login_type;
	    dd($_SESSION);
	    if (!user_is_logged_in()) {
		dd('user is NOT logged in');
		if ($login_type == "fb") {
		    dd('fb login type');
		    $fb = _get_facebook(true); // prevents loading from cache
		    $fb_user=$fb->get_loggedin_user();
		    dd('fb user obj: ');
		    dd($fb_user);
		    if ($fb_user) {
			dd('user is logged into facebook. logging in user');
			safacebook_login_user($fb_user);
		    }
		}
	    }
	}
	else {
	    dd('no type');
	}
	
	//if ( !( ($user->uid == 1) || ($user->name == 'admin') || (in_array($user->uid, array(112, 115, 217, 275, 276, 277, 278, 279, 280, 281, 306))) ) ) {
	//    //log_debug('NOT an exception...');
	//    $fb = _get_facebook(true); // prevents loading from cache
	//    //log_debug('fb: ', $fb);
	//    $fb_user=$fb->get_loggedin_user();
	//    //log_debug('fb user: ', $fb_user);
	//
	//    if ( user_is_logged_in() ) {
	//        if (!$fb_user) {
	//            //log_debug("no FB user, logging out...");
	//            //log_debug("curr ui is ", $curr_uri);
	//            //if ( !($curr_uri == "/logout") ) {
	//		//log_debug("The URI is NOT logout...");
	//		//drupal_goto('logout');
	//		//user_logout();
	//	    //}
	//	}
	//    }
	//    else {
	//        //log_debug("user is not logged in...");
	//        // don't let anonymous users go to the /user page
	//        if ( $curr_uri == "/user" ) {
	//	    //log_debug('1111');
	//	    //drupal_goto("/");
	//        }
	//        if ($fb_user) {  // if connected to Facebook...
	//            //log_debug("trying to log in user...");
	//            if (!($curr_uri == '/user/register') ) {  // don't log them in if they're trying to register
	//		safacebook_login_user($fb_user, $curr_uri);  // in safacebook module
	//	    }
	//	}
	//	else {  // user not connected to facebook. don't let them register
	//	    if (substr($curr_uri,0,14) == '/user/register') {
	//		if (isset($_REQUEST['destination'])) {
	//		    unset($_REQUEST['destination']);
	//		}
	//		drupal_goto('');
	//	    }
	//	}
	//    }
	//}
	
    }
    //log_debug('exiting init...');
}


// Can I store the path to the Facebook user picture?
// i do believe that is not considered information

/* implementation of hook user */
function safacebook_user($op, &$edit, &$account) {
    //log_debug("hook user(safacebook)");
    //log_debug("account is ", $account);
    // on user creation, add a facebook mapping row
    switch($op) {
	case 'insert':
	   //log_debug("inserting a new user: ", $edit);
	    $fb = _get_facebook();
	    $fb_user=$fb->get_loggedin_user();
	    _create_facebook_user_mapping($fb_user, $edit['uid']);
	   //log_debug("facebook user created...");
	    break;
	case 'load':  // add any pertinent facebook account details to user object
	    $account->facebook_id = safacebook_get_facebook_id($account->uid);
	    break;
	case 'delete':
	    // remove fb mapping entry
	    db_query("DELETE FROM {facebook_mapping} WHERE uid='%d'", $account->uid);
	    break;
	
    }
}



function safacebook_api($uid) {
    drupal_add_js(drupal_get_path('module', 'safacebook') . '/safacebook_tester.js');
    $output = theme('tester');
    return $output;
    //return 'uid: ' . $uid;
}



function safacebook_link_alter(&$node, &$links) {
    //log_debug("hook link alter. node is ", $node);
    //log_debug("hook link alter. links is ", $links);
}




function safacebook_form_user_register_alter(&$form, $form_state) {
    $form['user_registration_help']['#value'] = '<div id="fb-escape"><p>Click <a onclick="FB.Connect.logout(function() { reload(); }); return false;" href="#"><img id="fb_logout_image" src="http://static.ak.fbcdn.net/images/fbconnect/logout-buttons/logout_small.gif" alt="Connect" /></a> to disconnect from Facebook and return to the site if you do not want to register.</p></div>';
   //log_debug("form id: ", $form);
    //$fb = _get_facebook();
    //$form['account']['name']['#default_value'] = 'default name';
    //$form['account']['mail']['#default_value'] = 'default mail';
}


function safacebook_form_user_profile_form_alter(&$form, $form_state) {
    //log_debug('user profile form alter');
    //log_debug('form: ', $form);
    global $user;
    if ( !( ($user->uid == 1) || ($user->name == 'admin') || ($user->uid == 112) || ($user->uid == 115) ) ) {
	//$form['account']['pass']['#type'] = 'hidden';
    }
}


function safacebook_preprocess_views_view_fields(&$vars) {
    //log_debug("Preprocess views view fields...");
    //log_debug("view:: ", $vars['view']);
}


function safacebook_preprocess_node(&$vars) {
   //log_debug("SAFACEBOOK PREPROCESS NODE");
    // create a new "teaser" for the recent posts nodes.
    // add a var that is the description
}



function safacebook_nodeapi(&$node, $op) {
    /*log_debug("hook NODEAPI");
    if ( $op == 'view' ) {
	//log_debug("node obj: ", $node);
	log_debug("node teaser: ", $node->teaser);
	log_debug("node content: ", $node->body);
    }*/
}



function safacebook_test() {
    drupal_add_js(drupal_get_path('module', 'safacebook') . '/safacebook.js');
   //log_debug("Playground");
    
    $fb = _get_facebook();
    $fbuser = $fb->require_login();
    //log_debug('fbuser object: ', $fbuser);
    $user_details = _get_facebook_user_details($fb, $fbuser, FALSE);
    //log_debug("first name: ", $user_details['0']['first_name']);
    
    $output = theme('playground', $fbuser, $user_details);
    return $output;
}







function safacebook_block($op='list', $delta=0, $edit=array()) {
    switch($op) {
	case 'list':
	    $blocks[0]['info'] = t('Facebook Active Users');
	    $blocks[0]['cache'] = BLOCK_NO_CACHE;
	    return $blocks;
	case 'configure':
	   //log_debug("configure block");
	    break;
	case 'view':
	    $fb = _get_facebook();
	    $active_user_list = array();
	    //$query = _block_get_query();
	    $query = _block_get_most_active_users_ever_query();
	    //$query = _block_get_recent_active_users_query();
	    //log_debug("query is ", $query);
	    //$result = db_query($query);
	    //$result = db_query_range($query, time(), time(), 0, 8);
	    $result = db_query_range($query, 0, 8);
	    while ( $fbuser = db_fetch_object($result) ) {
		//log_debug('block: fbuser: ', $fbuser);
		//$user_details = _get_facebook_user_details($fb, $fbuser->facebook_id);
		//log_debug('user details: ', $user_details);
		//if ( $user_details ) {
		 //   $active_user_list[] = $user_details;
		    $active_user_list[] = $fbuser;
		//}
	    }
	    //log_debug("active user list: ", $active_user_list);
	    $block['content'] = theme('active_users', $active_user_list);
	    return $block;
    }
}


// if we don't need any user info, can just select from facebook_mapping instead of joining
// planning to possibly split out different queries for a setting in the admin...
function _block_get_query() {
    $query = "SELECT * FROM {users} u ";
    $query .= "INNER JOIN {facebook_mapping} fm on u.uid=fm.uid ";
    $query .= "WHERE u.uid > 1 ";
    $query .= "ORDER BY u.created DESC LIMIT 8";
    return $query;
}


function _block_get_most_active_users_ever_query() {
    // leave out my test accounts for now..
    $query = "SELECT u.*, fm.facebook_id, COUNT(c.cid) count 
		FROM {users} u
		LEFT JOIN {node} n ON u.uid = n.uid
		LEFT JOIN {comments} c ON c.uid = u.uid
		INNER JOIN {facebook_mapping} fm on u.uid = fm.uid 
		WHERE u.uid > 1
		  AND (n.uid = u.uid OR c.uid = u.uid)
		  AND u.status = 1
		  AND (u.name <> 'bill' AND u.name <> 'domo') 
		GROUP BY n.uid
		ORDER BY count DESC";
    return $query;
}


// most active in past week
function _block_get_recent_active_users_query() {
    $query = "SELECT u.*, fm.facebook_id, SUM(count) sum FROM (
		(
		SELECT u.uid, COUNT(DISTINCT(n.nid)) count
		FROM {users} u
		LEFT JOIN {node} n ON u.uid = n.uid
		WHERE u.uid <> 0
		  AND n.created > %d - (7 * 24 * 60 * 60)
		GROUP BY u.uid
		) UNION (
		SELECT u.uid, COUNT(DISTINCT(c.cid)) count
		FROM {users} u
		LEFT JOIN {comments} c ON c.uid = u.uid
		WHERE u.uid <> 0
		  AND c.timestamp > %d - (7 * 24 * 60 * 60)
		GROUP BY u.uid
		)
		ORDER BY count DESC
		) as x
		GROUP BY uid
		ORDER BY count DESC";
		//, time(), time(), 
		//0, 8);
    return $query;
}






function safacebook_theme() {
    return array(
       'playground' => array(
            'template' => 'tmpl/playground',
            'arguments' => array('fbuser'=>$fbuser, 'user_details'=>$user_details),
        ),
       'tester' => array(
            'template' => 'tmpl/tester',
            'arguments' => array(),
        ),
       'frontpage' => array(
            'template' => 'tmpl/frontpage',
            'arguments' => array(),
        ),
       'front_logged_in' => array(
            'template' => 'tmpl/front-logged-in',
            'arguments' => array(),
        ),
       'front_not_logged_in' => array(
            'template' => 'tmpl/front-not-logged-in',
            'arguments' => array(),
        ),
       'active_users' => array(
            'template' => 'tmpl/active-users',
            'arguments' => array('active_users'=>$active_user_list),
        ),
    );
}



function safacebook_cron() {
    // clear the cache of facebook user info
    watchdog("safacebook", "safacebook_cron begin");
}



function _create_facebook_user_mapping($fbid, $uid) {
    $fbmapping = new stdClass();
    $fbmapping->facebook_id = $fbid;
    $fbmapping->uid = $uid;
    $now = date("Y-m-d H:i:s");
    $fbmapping->created = $now;
    drupal_write_record('facebook_mapping', $fbmapping);
   //log_debug('created facebook mapping: ', $fbmapping);
}




function safacebook_login_user($fb_user, $curr_uri = "/") {
    //log_debug("login user: fb_user is ", $fb_user);
    $result = db_query("SELECT * FROM {facebook_mapping} WHERE facebook_id = '%s' ", $fb_user);
    if ($fb_mapping = db_fetch_object($result)) {
	$site_user = user_load($fb_mapping->uid);
	//log_debug("site user: ", $site_user);
	if ( $site_user ) {
	    user_external_login_register($site_user->name, 'safacebook');
	    //log_debug("user is now logged in");
	    //log_debug('going to uri: ', $curr_uri);
	    drupal_goto($curr_uri);
	}
	else {
	    // user account no longer exists
	    //log_debug("user NOT a member of the site...");
	    drupal_goto('user/register');
	}
    }
    else {
	// user does not exist on the site yet...
	//log_debug("user NOT a member of the site2...");
	drupal_goto('user/register');
    }
}



function safacebook_get_facebook_id($uid) {
    $result = db_query("SELECT * FROM {facebook_mapping} WHERE uid = '%d' ", $uid);
    if ($fb_mapping = db_fetch_object($result)) {
	return $fb_mapping->facebook_id;
    }
    return NULL;
}


function safacebook_get_user_photo_main($uid) {
   //log_debug("safacebook_get_user_photo_main");
    $result = db_query("SELECT * FROM {facebook_mapping} WHERE uid = '%d' ", $uid);
    $fb = _get_facebook();
    if ($fb_mapping = db_fetch_object($result)) {
	$user_details = $fb->api_client->users_getInfo($fb_mapping->facebook_id, 'pic');
	//log_debug("main- user details: ", $user_details);
	return $user_details[0]['pic'];
    }
    return '';
}


// Need caching in these facebook functions
function safacebook_get_user_photo_square($uid) {
    $result = db_query("SELECT * FROM {facebook_mapping} WHERE uid = '%d' ", $uid);
    
    if ($fb_mapping = db_fetch_object($result)) {
	$fb = _get_facebook();
	//log_debug("trying to get user details for uid ", $uid);
	$user_details = _get_facebook_user_details($fb, $fb_mapping->facebook_id); 
	//$user_details = $fb->api_client->users_getInfo($fb_mapping->facebook_id, 'pic_square');
	//log_debug("square: got user details: ", $user_details);
	if ( $user_details[0] ) {
	    return $user_details[0]['pic_square'];
	}
    }
    return '';
}


// private functions
function _get_facebook_user_details($fb, $fbuser, $reset = FALSE) {
    //log_debug('get facebook user details function. reset is ', $reset);
    $user_details = NULL;
    $cache_key = 'safacebook_fbuser_' . $fbuser;
    //log_debug('cache key is ', $cache_key);
    if ( !$reset && ($cache = cache_get($cache_key)) && !empty($cache->data) ) {
	$user_details = unserialize($cache->data);
    }
    else {
	$user_details = $fb->api_client->users_getInfo($fbuser, 'last_name, first_name, pic, pic_square');
	cache_set($cache_key, serialize($user_details), 'cache', time() + (60*60*6));  // cache for 6 hours? 
    }
    //log_debug('got user_details: ', $user_details);
    return $user_details;
}



function _get_facebook_user_photo_square_from_cache($uid) {
    
}



function _get_facebook($reset = false) {
    static $fb;
    
    //log_debug("get_facebook function. reset is ", $reset);
    //log_debug("current static facebook object: ", $fb);
    
    if ( !isset($fb) || $reset ) {
	if ( !$reset && ($cache = cache_get('safacebook_fb')) && !empty($cache->data) ) {
	    $fb = unserialize($cache->data);
	}
	else {
	    $api_key = variable_get('safacebook_api_key', '');
	    $secret = variable_get('safacebook_secret', '');
	    //log_debug('api key is ', $api_key);
	    //log_debug('secret is ', $secret);
	    $fb=new Facebook($api_key,$secret);
	    cache_set('safacebook_fb', serialize($fb), 'cache');
	    //log_debug('set fb in cache to be ', $fb);
	}	
    }
    
    //log_debug('finally got a fb object: ', $fb);
    return $fb;
}

